export default async function handler(request) {
  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram
  if (request.method !== 'POST') {
    return new Response('Telegram Bot Webhook', { status: 200 });
  }

  try {
    const update = await request.json();
    
    if (update.message) {
      const chatId = update.message.chat.id;
      const text = update.message.text || '';
      const firstName = update.message.from.first_name || '';
      
      // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
      let responseText = '';
      let keyboard = null;
      
      if (text === '/start') {
        responseText = `üè† –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\nUAE Property Navigator\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:`;
        keyboard = {
          keyboard: [
            ['üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá¨üáß English']
          ],
          resize_keyboard: true
        };
      } 
      else if (text.includes('üá∑üá∫') || text.includes('–†—É—Å—Å–∫–∏–π')) {
        responseText = `üè† <b>–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –û–ê–≠</b>\n\n–•–æ—á—É —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å:`;
        keyboard = {
          keyboard: [
            ['üè† –ñ–∏—Ç—å', 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'],
            ['üîÑ –ü—Ä–æ–¥–∞—Ç—å/–°–¥–∞—Ç—å', 'üéØ –°–º–µ—à–∞–Ω–Ω—ã–π']
          ],
          resize_keyboard: true
        };
      }
      else if (text.includes('üá¨üáß') || text.includes('English')) {
        responseText = `üè† <b>UAE Real Estate</b>\n\nWhat's your current focus:`;
        keyboard = {
          keyboard: [
            ['üè† Live', 'üìà Invest'],
            ['üîÑ Sell/Rent', 'üéØ Mixed']
          ],
          resize_keyboard: true
        };
      }
      else if (text.includes('–ñ–∏—Ç—å') || text.includes('Live')) {
        responseText = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –§–æ–∫—É—Å –Ω–∞ –∂–∏–∑–Ω–∏ –≤ –û–ê–≠.\n\n–ö–∞–∫–æ–≤ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ –±—é–¥–∂–µ—Ç—É?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: 3-4M AED)`;
      }
      else if (text.includes('–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å') || text.includes('Invest')) {
        responseText = `üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–∫—É—Å!\n\n–ö–∞–∫–∞—è —Ü–µ–ª–µ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: 6-8% –≥–æ–¥–æ–≤—ã—Ö)`;
      }
      else if (text.includes('M AED') || text.includes('–º–ª–Ω') || /\d+/.test(text)) {
        responseText = `üí∞ –ë—é–¥–∂–µ—Ç –ø–æ–Ω—è—Ç–µ–Ω!\n\n–ß—Ç–æ –≤–∞–∂–Ω–µ–µ:`;
        keyboard = {
          keyboard: [
            ['üåä –£—Ç—Ä–æ —É –≤–æ–¥—ã', 'üèôÔ∏è –î–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω—Ç—Ä—É'],
            ['‚öñÔ∏è –ë–∞–ª–∞–Ω—Å', 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –±—Ä–æ–∫–µ—Ä–æ–º']
          ],
          resize_keyboard: true
        };
      }
      else if (text.includes('–°–≤—è–∑–∞—Ç—å—Å—è') || text.includes('–±—Ä–æ–∫–µ—Ä–æ–º') || text.includes('Contact')) {
        responseText = `üìû <b>–°–≤—è–∑—å —Å –±—Ä–æ–∫–µ—Ä–æ–º</b>\n\n‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–°–≤—è–∂—É—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n\nüì± Telegram: @ivandubai_signal_bot\nüìû WhatsApp: +971502778021`;
      }
      else if (text.includes('–≤–æ–¥–∞') || text.includes('water')) {
        responseText = `üåä <b>–£—Ç—Ä–æ —É –≤–æ–¥—ã - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</b>\n\n–†–µ–∫–æ–º–µ–Ω–¥—É—é –ª–æ–∫–∞—Ü–∏–∏:\n‚Ä¢ Palm Jumeirah - —á–∞—Å—Ç–Ω—ã–µ –ø–ª—è–∂–∏\n‚Ä¢ Dubai Marina - –≤–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª\n‚Ä¢ JBR - –ø—Ä—è–º–æ —É –º–æ—Ä—è\n\n–ü–µ—Ä–µ–¥–∞—Ç—å –±—Ä–æ–∫–µ—Ä—É –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?`;
        keyboard = {
          keyboard: [
            ['üìû –î–∞, —Å–≤—è–∑–∞—Ç—å—Å—è —Å –±—Ä–æ–∫–µ—Ä–æ–º'],
            ['üèôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã']
          ],
          resize_keyboard: true
        };
      }
      else {
        responseText = `–ü–æ–Ω—è–ª! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–¥–±–æ—Ä...\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –±—Ä–æ–∫–µ—Ä–æ–º"`;
      }
      
      if (responseText) {
        await sendMessage(chatId, responseText, keyboard);
      }
    }
    
    return new Response('OK', { status: 200 });
  } catch (error) {
    console.error('Bot error:', error);
    return new Response('Error', { status: 500 });
  }
}

async function sendMessage(chatId, text, replyMarkup = null) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN not found');
    return;
  }
  
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (replyMarkup) {
    payload.reply_markup = replyMarkup;
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      console.error('Telegram API error:', await response.text());
    }
  } catch (error) {
    console.error('Send message error:', error);
  }
}

// Edge Runtime config
export const config = {
  runtime: 'edge'
};